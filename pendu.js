// Generated by CoffeeScript 2.7.0
(function() {
  // https://ronlinu.github.io/pendu
  var askConfirm, game, generate_new_word, guess, play, reveal, reveal_word, showAlert, show_labels;

  game = {
    revealedWord: '',
    hiddenWord: '',
    gamesCounter: '', // does not show zero
    failsCounter: '', // same
    keyboardKeys: [],
    gameKey: null
  };

  (function() {    // --------------------------------------
    // Create the keyboard with its event handlers
    var createKey, footer, i, j, keyboard, len, len1, letter, results, row, rowDiv, rows;
    footer = document.getElementById('footer');
    // Create keyboard container
    keyboard = document.createElement('div');
    keyboard.style.marginTop = '10px';
    footer.appendChild(keyboard);
    // Define rows of alphabet keys
    rows = [['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['H', 'I', 'J', 'K', 'L', 'M', 'N'], ['O', 'P', 'Q', 'R', 'S', 'T', 'U'], ['V', 'W', 'X', 'Y', 'Z'], ['COMMENCER', 'AU SUJET']];
    // ----- Local function to create a key button
    createKey = function(letter) {
      var btn;
      btn = document.createElement('button');
      btn.textContent = letter;
      btn.style.cursor = 'pointer';
      if (letter.length === 1) {
        game.keyboardKeys.push(btn); // record alpha key reference
        btn.style.margin = '2px';
        btn.style.padding = '5px 14px';
        btn.style.fontSize = '16px';
        btn.disabled = true;
      } else if (letter === 'COMMENCER') {
        game.gameKey = btn; // record game key reference
        btn.style.margin = '5px';
        btn.style.padding = '5px 16px';
        btn.style.fontSize = '16px';
        btn.style.background = 'lightgray';
      } else {
        btn.style.margin = '5px';
        btn.style.padding = '5px 16px';
        btn.style.fontSize = '16px';
        btn.style.background = 'lightgray';
      }
      btn.onclick = function() {
        switch (letter) {
          case 'COMMENCER':
            return play();
          case 'AU SUJET':
            return showAlert('Au sujet de Pendu', '', 'left', AIDE);
          default:
            btn.disabled = true;
            return guess(letter);
        }
      };
      return btn;
    };

    // Generate keys row-wise
    results = [];
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      rowDiv = document.createElement('div');
      rowDiv.style.marginBottom = '5px';
      for (j = 0, len1 = row.length; j < len1; j++) {
        letter = row[j];
        rowDiv.appendChild(createKey(letter));
      }
      results.push(keyboard.appendChild(rowDiv));
    }
    return results;
  })();

  // --------------------------------------
  showAlert = function(title, icon, textalign, msg) {
    return Swal.fire({
      title: title,
      html: `<div style='text-align: ${textalign}; font-size: 16px;'>${msg}</div>`,
      icon: icon,
      confirmButtonText: 'OK',
      position: 'center',
      animation: true
    });
  };

  // --------------------------------------
  askConfirm = function(title, icon, message) {
    return Swal.fire({
      title: title,
      html: message,
      icon: icon,
      showCancelButton: true,
      confirmButtonText: 'Oui',
      cancelButtonText: 'Non',
      focusCancel: true,
      position: 'center'
    });
  };

  // --------------------------------------
  show_labels = function() {
    var labels, prefix, s, scores;
    scores = document.getElementById('scores');
    s = '&nbsp;';
    prefix = '<li><kbd style="font-size: 16px;">' + `${s}${s}${s}${s}`;
    labels = `${prefix}Partie no: ${game.gamesCounter}</kbd>`;
    labels += `${prefix}Mot caché: ${game.revealedWord}</kbd>`;
    labels += `${prefix}${s}${s}${s}Échecs: ${game.failsCounter}</kbd>`;
    return scores.innerHTML = labels;
  };

  // -------------------------------------
  reveal = function(letter) {
    var ch, collator, i, index, len, ref, revealed;
    collator = new Intl.Collator('fr', {
      sensitivity: 'base'
    });
    revealed = game.revealedWord.split('');
    ref = game.hiddenWord;
    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      ch = ref[index];
      if (collator.compare(ch, letter) === 0) {
        revealed[index] = game.hiddenWord[index];
      }
    }
    return game.revealedWord = revealed.join('');
  };

  // --------------------------------------
  guess = function(letter) {
    var beforeReveal, i, image_file, j, key, len, len1, ref, ref1;
    beforeReveal = game.revealedWord;
    reveal(letter);
    show_labels();
    if (game.revealedWord === beforeReveal) {
      game.failsCounter++;
      show_labels();
      image_file = `pendu/pendu_${pendu.failsCounter}.png`;
      document.getElementById('gallows').src = image_file;
    }
    if (game.failsCounter === 10) {
      game.revealedWord = game.hiddenWord;
      show_labels();
      ref = game.keyboardKeys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        key.disabled = true;
      }
      game.gameKey.textContent = 'NOUVEAU MOT';
      return showAlert('Vous avez perdu!', 'info', 'center', `Le mot caché était: ${game.hiddenWord}`);
    } else if (game.revealedWord === game.hiddenWord) {
      ref1 = game.keyboardKeys;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        key = ref1[j];
        key.disabled = true;
      }
      game.gameKey.textContent = 'NOUVEAU MOT';
      return showAlert('Bravo!', 'info', 'center', "Vous avez gagné.");
    }
  };

  // --------------------------------------
  reveal_word = async function() {
    var i, key, len, ref, result;
    result = (await askConfirm('Attention', 'question', 'Révéler le mot caché terminera cette partie.<br><br>Êtes-vous certain?'));
    if (result.isConfirmed) {
      ref = game.keyboardKeys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        // disable all virtual alphabetical keys
        key.disabled = true;
      }
      game.revealedWord = game.hiddenWord;
      game.gameKey.textContent = 'NOUVEAU MOT';
      return show_labels();
    }
  };

  // --------------------------------------
  generate_new_word = function() {
    var i, key, len, ref;
    // pick a random word from WORDS[] array defined in pendu_mots.js file
    while (true) {
      game.hiddenWord = WORDS[Math.floor(Math.random() * WORDS.length)].toLowerCase();
      // Avoid extra-long words (limit subject to change...)
      if (game.hiddenWord.length <= 20) {
        break;
      }
    }
    game.revealedWord = '*'.repeat(game.hiddenWord.length);
    reveal('(');
    reveal(')');
    reveal('-');
    game.gamesCounter++;
    game.failsCounter = '';
    ref = game.keyboardKeys;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      // enable all virtual alphabetic keys
      key.disabled = false;
    }
    document.getElementById('gallows').src = 'pendu/pendu_0.png';
    show_labels();
    game.gameKey.textContent = 'RÉVÉLER MOT';
    return showAlert(`Partie no. ${game.gamesCounter}`, '', 'center', `Mot caché de ${game.hiddenWord.length} lettres`);
  };

  // --------------------------------------
  play = function() {
    switch (game.gameKey.textContent) {
      case 'COMMENCER':
      case 'NOUVEAU MOT':
        return generate_new_word();
      case 'RÉVÉLER MOT':
        return reveal_word();
    }
  };

}).call(this);
